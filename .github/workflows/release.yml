name: Build and Release fideo

on:
  push:
    # branches:
    #   - release
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install PNPM
      run: npm install -g pnpm

    - name: Install dependencies
      run: pnpm install

    - name: Get version from package.json
      id: get_version
      run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      shell: bash

    - name: Build Electron App
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          pnpm build:win
        elif [ "${{ runner.os }}" == "macOS" ]; then
          pnpm build:mac
        elif [ "${{ runner.os }}" == "ubuntu-latest" ]; then
          pnpm build:linux
        fi
      shell: bash

    - name: Upload Windows build artifact
      if: ${{ runner.os == 'Windows' }}
      uses: actions/upload-artifact@v4
      with:
        name: build-win-${{ env.VERSION }}
        path: dist/fideo-${{ env.VERSION }}.exe

    - name: Upload macOS build artifacts (x64)
      if: ${{ runner.os == 'macOS' }}
      uses: actions/upload-artifact@v4
      with:
        name: build-mac-x64-${{ env.VERSION }}
        path: dist/fideo-${{ env.VERSION }}-x64.dmg

    - name: Upload macOS build artifacts (arm)
      if: ${{ runner.os == 'macOS' }}
      uses: actions/upload-artifact@v4
      with:
        name: build-mac-arm-${{ env.VERSION }}
        path: dist/fideo-${{ env.VERSION }}-arm64.dmg
    
    - name: Upload Linux build artifact
      if: ${{ runner.os == 'ubuntu-latest' }}
      uses: actions/upload-artifact@v4
      with:
        name: build-linux-${{ env.VERSION }}
        path: dist/fideo-${{ env.VERSION }}*  # 替换为实际的 Linux 打包输出文件路径


  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from package.json
      id: get_version
      run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV

    - name: Download Windows build artifact
      uses: actions/download-artifact@v4
      with:
        name: build-win-${{ env.VERSION }}
        path: .

    - name: Download macOS build artifacts (x64)
      uses: actions/download-artifact@v4
      with:
        name: build-mac-x64-${{ env.VERSION }}
        path: .

    - name: Download macOS build artifacts (arm)
      uses: actions/download-artifact@v4
      with:
        name: build-mac-arm-${{ env.VERSION }}
        path: .
    
    # - name: Download Linux build artifact
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: build-linux-${{ env.VERSION }}
    #     path: .

    - name: Upload Release Asset
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          fideo-${{ env.VERSION }}-x64.dmg
          fideo-${{ env.VERSION }}-arm64.dmg
          fideo-${{ env.VERSION }}.exe
        tag_name: v${{ env.VERSION }}
